# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright (c) 2015 Intracom S.A. Telecom Solutions. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v1.0 which accompanies this distribution,
# and is available at http://www.eclipse.org/legal/epl-v10.html

# ------------------------------------------------------------------------------
# VM configuration.
# ------------------------------------------------------------------------------

# make a new nstat_vm_basebox based on 'ubuntu/trusty64'
# https://atlas.hashicorp.com/ubuntu (latest version)
# vagrant box update (for updating to the latest official box)
# ------------------------------------------------------------------------------

# make a new nstat_vm_basebox based on 'nstat_vm_base'
# ------------------------------------------------------------------------------
nstat_vm_basebox = 'nstat_vm_base'
nstat_vm_ram_mini = '1024'
nstat_vm_cpus_mini = '2'
nstat_vm_bridge_interface_name = 'br0'
nstat_num_multinet_vms = 3
nstat_vm_hostname = 'node_worker_'
nstat_vm_name = 'vm_worker_'
nstat_vm_hostname_mini = 'multinet'

nstat_vm_private_network_ip_mini = '192.168.64.30' # The first IP Address in the
forwarded_ports_master = []                     # multinet VMs IP Address range
forwarded_ports_host = []
# ------------------------------------------------------------------------------
# RUNNING_ENV options: 'with-proxy', 'no-proxy'
# ------------------------------------------------------------------------------
RUNNING_ENV = 'with-proxy'
# ------------------------------------------------------------------------------

# configure proxy settings
# ------------------------------------------------------------------------------
if RUNNING_ENV == 'with-proxy'
  #http_proxy = 'http://<IP_address>:<port_number>'
  http_proxy = 'http://172.28.40.9:3128'
  puts '--------------------------------------------------------'
  puts 'with-proxy RUNNING_ENV'
  if !Vagrant.has_plugin?('vagrant-proxyconf')
    abort("-vagrant-proxyconf plugin missing.
           -install it manually by typing:
--------------------------------------------------------
            vagrant plugin install vagrant-proxyconf
--------------------------------------------------------
            rerun: vagrant up")
  end
elsif RUNNING_ENV == 'no-proxy'
  puts '--------------------------------------------------------'
  puts 'running: no-proxy RUNNING_ENV'
else
  puts 'RUNNING_ENV not set'
end


Vagrant.configure(2) do |config|

  config.ssh.username = 'vagrant'
  config.ssh.password = 'vagrant'

  if RUNNING_ENV == 'with-proxy'
    config.proxy.http = http_proxy
    config.proxy.https = http_proxy
    config.proxy.no_proxy = 'localhost,127.0.0.1,192.168.64.15,192.168.64.16,192.168.64.17,192.168.64.18'
  end


  config.ssh.shell = 'bash -c "BASH_ENV=/etc/profile exec bash"'


    # Configure multinet VMs


    (1..nstat_num_multinet_vms).each do |mn_vm|

        # Assign adjacent IP addresses to all multinet VMs
        # ----------------------------------------------------------------------
        last_ip_digit = nstat_vm_private_network_ip_mini[-1].to_i
        new_last_ip_digit = last_ip_digit + (mn_vm - 1)
        base_ip = nstat_vm_private_network_ip_mini[0..-2]

        nstat_vm_private_network_ip_mini_inst = base_ip + new_last_ip_digit.to_s

        puts "multinet VM " + mn_vm.to_s + " IP: " + nstat_vm_private_network_ip_mini_inst

        uid_mini = ENV.has_key?('VM_UID') ? '_' + ENV['VM_UID'].split('-')[0] : '_' + nstat_vm_private_network_ip_mini_inst
        nstat_vm_name_mini_inst = 'nstat_ubuntu_box_'  + ENV['USER'] + uid_mini + '_mini' + "_" + mn_vm.to_s

        mh_vm_hostname_mini_inst = nstat_vm_hostname_mini + "-" + mn_vm.to_s

        config.vm.define nstat_vm_name_mini_inst do |machine|
            machine.proxy.no_proxy = 'localhost,127.0.0.1,' + nstat_vm_private_network_ip_mini_inst
            machine.vm.box = nstat_vm_basebox
            machine.vm.host_name = mh_vm_hostname_mini_inst + '.' + mh_vm_hostname_mini_inst
            machine.vm.network :public_network, bridge: nstat_vm_bridge_interface_name, ip: nstat_vm_private_network_ip_mini_inst, nictype: "virtio"

            if mn_vm == 1
                forwarded_ports_master.zip(forwarded_ports_host).each do |guest_port, host_port|
                    machine.vm.network 'forwarded_port', guest: guest_port, host: host_port, auto_correct: true
                end
            end

            machine.vm.provider :virtualbox do |vb|
                vb.memory = nstat_vm_ram_mini
                vb.cpus = nstat_vm_cpus_mini
            end
        end
    end


end
